<Type Name="TaxonomyClientService" FullName="Microsoft.SharePoint.Taxonomy.WebServices.TaxonomyClientService">
  <TypeSignature Language="C#" Value="public sealed class TaxonomyClientService : System.Web.Services.WebService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TaxonomyClientService extends System.Web.Services.WebService" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SharePoint.Taxonomy.WebServices.TaxonomyClientService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TaxonomyClientService&#xA;Inherits WebService" />
  <TypeSignature Language="C++ CLI" Value="public ref class TaxonomyClientService sealed : System::Web::Services::WebService" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.SharePoint.Taxonomy</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Services.WebService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.Script.Services.ScriptService</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.Services.WebService(Description="This web service is designed for Office client applications to use", Name="Taxonomy web service", Namespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.Services.WebServiceBinding(ConformsTo=System.Web.Services.WsiProfiles.BasicProfile1_1)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides the Web service methods needed for a client application to host a managed metadata control.</summary>
    <remarks>
      <para>This Web service enables a client to interact with the managed metadata <see cref="T:Microsoft.SharePoint.Taxonomy.TermStore" /> object and get the data through label matching, per T:Microsoft.SharePoint.Taxonomy.TermSet, or by GUID. Updates to the <b>TermStore</b> can also be made by adding a new <see cref="T:Microsoft.SharePoint.Taxonomy.Term" /> object.</para>
      <para />
    </remarks>
    <example>
      <code>using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 


/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="TaxonomyClientServiceSoap", Namespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/")]
public partial class TaxonomyClientService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetTermSetsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetTermsByLabelOperationCompleted;
    
    private System.Threading.SendOrPostCallback AddTermsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetKeywordTermsByGuidsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetChildTermsInTermSetOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetChildTermsInTermOperationCompleted;
    
    /// &amp;lt;remarks/&amp;gt;
    public TaxonomyClientService() {
        this.Url = "http://localhost:56509/WebSite1/Service.asmx";
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public event GetTermSetsCompletedEventHandler GetTermSetsCompleted;
    
    /// &amp;lt;remarks/&amp;gt;
    public event GetTermsByLabelCompletedEventHandler GetTermsByLabelCompleted;
    
    /// &amp;lt;remarks/&amp;gt;
    public event AddTermsCompletedEventHandler AddTermsCompleted;
    
    /// &amp;lt;remarks/&amp;gt;
    public event GetKeywordTermsByGuidsCompletedEventHandler GetKeywordTermsByGuidsCompleted;
    
    /// &amp;lt;remarks/&amp;gt;
    public event GetChildTermsInTermSetCompletedEventHandler GetChildTermsInTermSetCompleted;
    
    /// &amp;lt;remarks/&amp;gt;
    public event GetChildTermsInTermCompletedEventHandler GetChildTermsInTermCompleted;
    
    /// &amp;lt;remarks/&amp;gt;
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/taxonomy/soap/GetTermSets", RequestNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetTermSets(string sharedServiceIds, string TermSetIds, int lcid, string clientTimeStamps, string clientVersions, out string serverTermSetTimeStampXml) {
        object[] results = this.Invoke("GetTermSets", new object[] {
                    sharedServiceIds,
                    TermSetIds,
                    lcid,
                    clientTimeStamps,
                    clientVersions});
        serverTermSetTimeStampXml = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public System.IAsyncResult BeginGetTermSets(string sharedServiceIds, string TermSetIds, int lcid, string clientTimeStamps, string clientVersions, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTermSets", new object[] {
                    sharedServiceIds,
                    TermSetIds,
                    lcid,
                    clientTimeStamps,
                    clientVersions}, callback, asyncState);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string EndGetTermSets(System.IAsyncResult asyncResult, out string serverTermSetTimeStampXml) {
        object[] results = this.EndInvoke(asyncResult);
        serverTermSetTimeStampXml = ((string)(results[1]));
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void GetTermSetsAsync(string sharedServiceIds, string TermSetIds, int lcid, string clientTimeStamps, string clientVersions) {
        this.GetTermSetsAsync(sharedServiceIds, TermSetIds, lcid, clientTimeStamps, clientVersions, null);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void GetTermSetsAsync(string sharedServiceIds, string TermSetIds, int lcid, string clientTimeStamps, string clientVersions, object userState) {
        if ((this.GetTermSetsOperationCompleted == null)) {
            this.GetTermSetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTermSetsOperationCompleted);
        }
        this.InvokeAsync("GetTermSets", new object[] {
                    sharedServiceIds,
                    TermSetIds,
                    lcid,
                    clientTimeStamps,
                    clientVersions}, this.GetTermSetsOperationCompleted, userState);
    }
    
    private void OnGetTermSetsOperationCompleted(object arg) {
        if ((this.GetTermSetsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetTermSetsCompleted(this, new GetTermSetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// &amp;lt;remarks/&amp;gt;
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/taxonomy/soap/GetTermsByLabel", RequestNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetTermsByLabel(string label, int lcid, StringMatchOption matchOption, int resultCollectionSize, string TermIds, bool addIfNotFound) {
        object[] results = this.Invoke("GetTermsByLabel", new object[] {
                    label,
                    lcid,
                    matchOption,
                    resultCollectionSize,
                    TermIds,
                    addIfNotFound});
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public System.IAsyncResult BeginGetTermsByLabel(string label, int lcid, StringMatchOption matchOption, int resultCollectionSize, string TermIds, bool addIfNotFound, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetTermsByLabel", new object[] {
                    label,
                    lcid,
                    matchOption,
                    resultCollectionSize,
                    TermIds,
                    addIfNotFound}, callback, asyncState);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string EndGetTermsByLabel(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void GetTermsByLabelAsync(string label, int lcid, StringMatchOption matchOption, int resultCollectionSize, string TermIds, bool addIfNotFound) {
        this.GetTermsByLabelAsync(label, lcid, matchOption, resultCollectionSize, TermIds, addIfNotFound, null);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void GetTermsByLabelAsync(string label, int lcid, StringMatchOption matchOption, int resultCollectionSize, string TermIds, bool addIfNotFound, object userState) {
        if ((this.GetTermsByLabelOperationCompleted == null)) {
            this.GetTermsByLabelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTermsByLabelOperationCompleted);
        }
        this.InvokeAsync("GetTermsByLabel", new object[] {
                    label,
                    lcid,
                    matchOption,
                    resultCollectionSize,
                    TermIds,
                    addIfNotFound}, this.GetTermsByLabelOperationCompleted, userState);
    }
    
    private void OnGetTermsByLabelOperationCompleted(object arg) {
        if ((this.GetTermsByLabelCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetTermsByLabelCompleted(this, new GetTermsByLabelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// &amp;lt;remarks/&amp;gt;
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/taxonomy/soap/AddTerms", RequestNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string AddTerms(System.Guid sharedServiceId, System.Guid TermSetId, int lcid, string newTerms) {
        object[] results = this.Invoke("AddTerms", new object[] {
                    sharedServiceId,
                    TermSetId,
                    lcid,
                    newTerms});
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public System.IAsyncResult BeginAddTerms(System.Guid sharedServiceId, System.Guid TermSetId, int lcid, string newTerms, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddTerms", new object[] {
                    sharedServiceId,
                    TermSetId,
                    lcid,
                    newTerms}, callback, asyncState);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string EndAddTerms(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void AddTermsAsync(System.Guid sharedServiceId, System.Guid TermSetId, int lcid, string newTerms) {
        this.AddTermsAsync(sharedServiceId, TermSetId, lcid, newTerms, null);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void AddTermsAsync(System.Guid sharedServiceId, System.Guid TermSetId, int lcid, string newTerms, object userState) {
        if ((this.AddTermsOperationCompleted == null)) {
            this.AddTermsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTermsOperationCompleted);
        }
        this.InvokeAsync("AddTerms", new object[] {
                    sharedServiceId,
                    TermSetId,
                    lcid,
                    newTerms}, this.AddTermsOperationCompleted, userState);
    }
    
    private void OnAddTermsOperationCompleted(object arg) {
        if ((this.AddTermsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddTermsCompleted(this, new AddTermsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// &amp;lt;remarks/&amp;gt;
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/taxonomy/soap/GetKeywordTermsByGuids", RequestNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetKeywordTermsByGuids(string TermIds, int lcid) {
        object[] results = this.Invoke("GetKeywordTermsByGuids", new object[] {
                    TermIds,
                    lcid});
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public System.IAsyncResult BeginGetKeywordTermsByGuids(string TermIds, int lcid, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetKeywordTermsByGuids", new object[] {
                    TermIds,
                    lcid}, callback, asyncState);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string EndGetKeywordTermsByGuids(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void GetKeywordTermsByGuidsAsync(string TermIds, int lcid) {
        this.GetKeywordTermsByGuidsAsync(TermIds, lcid, null);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void GetKeywordTermsByGuidsAsync(string TermIds, int lcid, object userState) {
        if ((this.GetKeywordTermsByGuidsOperationCompleted == null)) {
            this.GetKeywordTermsByGuidsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeywordTermsByGuidsOperationCompleted);
        }
        this.InvokeAsync("GetKeywordTermsByGuids", new object[] {
                    TermIds,
                    lcid}, this.GetKeywordTermsByGuidsOperationCompleted, userState);
    }
    
    private void OnGetKeywordTermsByGuidsOperationCompleted(object arg) {
        if ((this.GetKeywordTermsByGuidsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetKeywordTermsByGuidsCompleted(this, new GetKeywordTermsByGuidsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// &amp;lt;remarks/&amp;gt;
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/taxonomy/soap/GetChildTermsInTermSet", RequestNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetChildTermsInTermSet(System.Guid sspId, int lcid, System.Guid TermSetId) {
        object[] results = this.Invoke("GetChildTermsInTermSet", new object[] {
                    sspId,
                    lcid,
                    TermSetId});
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public System.IAsyncResult BeginGetChildTermsInTermSet(System.Guid sspId, int lcid, System.Guid TermSetId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetChildTermsInTermSet", new object[] {
                    sspId,
                    lcid,
                    TermSetId}, callback, asyncState);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string EndGetChildTermsInTermSet(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void GetChildTermsInTermSetAsync(System.Guid sspId, int lcid, System.Guid TermSetId) {
        this.GetChildTermsInTermSetAsync(sspId, lcid, TermSetId, null);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void GetChildTermsInTermSetAsync(System.Guid sspId, int lcid, System.Guid TermSetId, object userState) {
        if ((this.GetChildTermsInTermSetOperationCompleted == null)) {
            this.GetChildTermsInTermSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildTermsInTermSetOperationCompleted);
        }
        this.InvokeAsync("GetChildTermsInTermSet", new object[] {
                    sspId,
                    lcid,
                    TermSetId}, this.GetChildTermsInTermSetOperationCompleted, userState);
    }
    
    private void OnGetChildTermsInTermSetOperationCompleted(object arg) {
        if ((this.GetChildTermsInTermSetCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetChildTermsInTermSetCompleted(this, new GetChildTermsInTermSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// &amp;lt;remarks/&amp;gt;
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.microsoft.com/sharepoint/taxonomy/soap/GetChildTermsInTerm", RequestNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", ResponseNamespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetChildTermsInTerm(System.Guid sspId, int lcid, System.Guid TermId, System.Guid TermSetId) {
        object[] results = this.Invoke("GetChildTermsInTerm", new object[] {
                    sspId,
                    lcid,
                    TermId,
                    TermSetId});
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public System.IAsyncResult BeginGetChildTermsInTerm(System.Guid sspId, int lcid, System.Guid TermId, System.Guid TermSetId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetChildTermsInTerm", new object[] {
                    sspId,
                    lcid,
                    TermId,
                    TermSetId}, callback, asyncState);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string EndGetChildTermsInTerm(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void GetChildTermsInTermAsync(System.Guid sspId, int lcid, System.Guid TermId, System.Guid TermSetId) {
        this.GetChildTermsInTermAsync(sspId, lcid, TermId, TermSetId, null);
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public void GetChildTermsInTermAsync(System.Guid sspId, int lcid, System.Guid TermId, System.Guid TermSetId, object userState) {
        if ((this.GetChildTermsInTermOperationCompleted == null)) {
            this.GetChildTermsInTermOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildTermsInTermOperationCompleted);
        }
        this.InvokeAsync("GetChildTermsInTerm", new object[] {
                    sspId,
                    lcid,
                    TermId,
                    TermSetId}, this.GetChildTermsInTermOperationCompleted, userState);
    }
    
    private void OnGetChildTermsInTermOperationCompleted(object arg) {
        if ((this.GetChildTermsInTermCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetChildTermsInTermCompleted(this, new GetChildTermsInTermCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/sharepoint/taxonomy/soap/")]
public enum StringMatchOption {
    
    /// &amp;lt;remarks/&amp;gt;
    StartsWith,
    
    /// &amp;lt;remarks/&amp;gt;
    ExactMatch,
}

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetTermSetsCompletedEventHandler(object sender, GetTermSetsCompletedEventArgs e);

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetTermSetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetTermSetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string serverTermSetTimeStampXml {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetTermsByLabelCompletedEventHandler(object sender, GetTermsByLabelCompletedEventArgs e);

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetTermsByLabelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetTermsByLabelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void AddTermsCompletedEventHandler(object sender, AddTermsCompletedEventArgs e);

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class AddTermsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddTermsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetKeywordTermsByGuidsCompletedEventHandler(object sender, GetKeywordTermsByGuidsCompletedEventArgs e);

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetKeywordTermsByGuidsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetKeywordTermsByGuidsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetChildTermsInTermSetCompletedEventHandler(object sender, GetChildTermsInTermSetCompletedEventArgs e);

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetChildTermsInTermSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetChildTermsInTermSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetChildTermsInTermCompletedEventHandler(object sender, GetChildTermsInTermCompletedEventArgs e);

/// &amp;lt;remarks/&amp;gt;
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetChildTermsInTermCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetChildTermsInTermCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// &amp;lt;remarks/&amp;gt;
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}</code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaxonomyClientService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SharePoint.Taxonomy.WebServices.TaxonomyClientService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TaxonomyClientService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.SharePoint.Taxonomy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of a <see cref="T:Microsoft.SharePoint.Taxonomy.WebServices.TaxonomyClientService" /> object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTerms">
      <MemberSignature Language="C#" Value="public string AddTerms (Guid sharedServiceId, Guid termSetId, int lcid, string newTerms);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string AddTerms(valuetype System.Guid sharedServiceId, valuetype System.Guid termSetId, int32 lcid, string newTerms) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SharePoint.Taxonomy.WebServices.TaxonomyClientService.AddTerms(System.Guid,System.Guid,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTerms (sharedServiceId As Guid, termSetId As Guid, lcid As Integer, newTerms As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ AddTerms(Guid sharedServiceId, Guid termSetId, int lcid, System::String ^ newTerms);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.SharePoint.Taxonomy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.WebMethod</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharedServiceId" Type="System.Guid" />
        <Parameter Name="termSetId" Type="System.Guid" />
        <Parameter Name="lcid" Type="System.Int32" />
        <Parameter Name="newTerms" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sharedServiceId">
          <b>TermStore</b> Id of <b>TermSet</b> to add <b>Term</b> in.</param>
        <param name="termSetId">To be added.</param>
        <param name="lcid">The language that the label will be added in.</param>
        <param name="newTerms">XML of new Terms to be added.</param>
        <summary>Adds a new <see cref="T:Microsoft.SharePoint.Taxonomy.Term" /> to the managed metadata <see cref="T:Microsoft.SharePoint.Taxonomy.TermStore" /> object.</summary>
        <returns>ID of the newly added Term.</returns>
        <remarks>
          <para>New <b>Terms</b> must be stored in XML nodes named NewTerm with an attribute label, attribute <paramref name="clientId" /> and attribute <paramref name="parentTermid" />. You can have as many NewTerm nodes as needed.  <paramref name="clientId" /> is an int that the client used to uniquely identify the newTerm.  The <paramref name="parentTermId" /> must either be the GUID of another <b>Term</b>, or an empty GUID if the new <b>Term</b> should be at the root of the <b>TermSet</b>.</para>
          <para />
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Thrown if user does not have access to the root web of the current context.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a <b>TermStore</b> with ID <paramref name="sharedServiceId" /> does not exist. Also, thrown if you try to add a new <b>Term</b> under another <b>Term</b> (<paramref name="parentTermId" /> is not the empty GUID), and you are trying to add to the keywords <b>TermSet</b> (TermSetId is the empty GUID).</exception>
        <exception cref="T:System.NullReferenceException">Thrown if the <b>TermSet</b> with ID TermSetId does not exist.</exception>
        <exception cref="T:System.ArgumentException">Thrown if the <paramref name="parentTermId" /> is not the empty GUID and the <b>Term</b> does not exist in the <b>TermSet</b> with ID TermSetId.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SharePoint.Taxonomy.WebServices.TaxonomyClientService.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.SharePoint.Taxonomy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>Cleans up any resources being used.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildTermsInTerm">
      <MemberSignature Language="C#" Value="public string GetChildTermsInTerm (Guid sspId, int lcid, Guid termId, Guid termSetId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetChildTermsInTerm(valuetype System.Guid sspId, int32 lcid, valuetype System.Guid termId, valuetype System.Guid termSetId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SharePoint.Taxonomy.WebServices.TaxonomyClientService.GetChildTermsInTerm(System.Guid,System.Int32,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildTermsInTerm (sspId As Guid, lcid As Integer, termId As Guid, termSetId As Guid) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetChildTermsInTerm(Guid sspId, int lcid, Guid termId, Guid termSetId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.SharePoint.Taxonomy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.WebMethod</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sspId" Type="System.Guid" />
        <Parameter Name="lcid" Type="System.Int32" />
        <Parameter Name="termId" Type="System.Guid" />
        <Parameter Name="termSetId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="sspId">
          <b>TermStore</b> ID of parent Term.</param>
        <param name="lcid">LCID of language that labels will be returned in.</param>
        <param name="termId">To be added.</param>
        <param name="termSetId">To be added.</param>
        <summary>Get immediate child <see cref="T:Microsoft.SharePoint.Taxonomy.Term" /> objects for a parent <b>Term</b>.</summary>
        <returns>Returns all child <b>Terms</b> of the parent serialized as an XML structure.</returns>
        <remarks>
          <para>The serialization is of the return value is fully described in the protocol document MS-EMMWS.</para>
          <para />
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a <b>TermStore</b> with <b>Id sharedServiceId</b> does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChildTermsInTermSet">
      <MemberSignature Language="C#" Value="public string GetChildTermsInTermSet (Guid sspId, int lcid, Guid termSetId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetChildTermsInTermSet(valuetype System.Guid sspId, int32 lcid, valuetype System.Guid termSetId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SharePoint.Taxonomy.WebServices.TaxonomyClientService.GetChildTermsInTermSet(System.Guid,System.Int32,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildTermsInTermSet (sspId As Guid, lcid As Integer, termSetId As Guid) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetChildTermsInTermSet(Guid sspId, int lcid, Guid termSetId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.SharePoint.Taxonomy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.WebMethod</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sspId" Type="System.Guid" />
        <Parameter Name="lcid" Type="System.Int32" />
        <Parameter Name="termSetId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="sspId">
          <b>TermStore Id</b> of <b>TermSet</b>.</param>
        <param name="lcid">LCID of language that labels will be returned in.</param>
        <param name="termSetId">To be added.</param>
        <summary>Get immediate child <see cref="T:Microsoft.SharePoint.Taxonomy.Term" /> objects for a <see cref="T:Microsoft.SharePoint.Taxonomy.TermSet" /> object.</summary>
        <returns>Returns all child <b>Terms</b> of the <b>TermSet</b> serialized as an XML structure.</returns>
        <remarks>
          <para>The serialization is of the return value is fully described in the protocol document MS-EMMWS.</para>
          <para />
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a <b>TermStore</b> with Id sharedServiceId does not exist.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetKeywordTermsByGuids">
      <MemberSignature Language="C#" Value="public string GetKeywordTermsByGuids (string termIds, int lcid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetKeywordTermsByGuids(string termIds, int32 lcid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SharePoint.Taxonomy.WebServices.TaxonomyClientService.GetKeywordTermsByGuids(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKeywordTermsByGuids (termIds As String, lcid As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetKeywordTermsByGuids(System::String ^ termIds, int lcid);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.SharePoint.Taxonomy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.WebMethod</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termIds" Type="System.String" />
        <Parameter Name="lcid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="termIds">To be added.</param>
        <param name="lcid">LCID of language labels will be returned in.</param>
        <summary>Gets <see cref="T:Microsoft.SharePoint.Taxonomy.Term" /> objects from the <see cref="T:Microsoft.SharePoint.Taxonomy.TermStore" /> by GUID.</summary>
        <returns>Returns all <b>Terms</b> requested serialized as an XML structure.</returns>
        <remarks>
          <para>Term IDs must be passed in as GUIDs contained in xml nodes.</para>
          <para>The serialization of the result as well as parameters is fully described in the protocol document MS-EMMWS.</para>
          <para />
        </remarks>
        <exception cref="T:Microsoft.SharePoint.Taxonomy.TermStoreOperationException">Thrown if a <b>Term</b> cannot be found and 1 or more <b>TermStore</b> objects is currently offline.</exception>
        <exception cref="T:System.ArgumentException">Thrown if no Term IDs are passed into the function.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTermsByLabel">
      <MemberSignature Language="C#" Value="public string GetTermsByLabel (string label, int lcid, Microsoft.SharePoint.Taxonomy.StringMatchOption matchOption, int resultCollectionSize, string termIds, bool addIfNotFound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTermsByLabel(string label, int32 lcid, valuetype Microsoft.SharePoint.Taxonomy.StringMatchOption matchOption, int32 resultCollectionSize, string termIds, bool addIfNotFound) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SharePoint.Taxonomy.WebServices.TaxonomyClientService.GetTermsByLabel(System.String,System.Int32,Microsoft.SharePoint.Taxonomy.StringMatchOption,System.Int32,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTermsByLabel (label As String, lcid As Integer, matchOption As StringMatchOption, resultCollectionSize As Integer, termIds As String, addIfNotFound As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTermsByLabel(System::String ^ label, int lcid, Microsoft::SharePoint::Taxonomy::StringMatchOption matchOption, int resultCollectionSize, System::String ^ termIds, bool addIfNotFound);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.SharePoint.Taxonomy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.WebMethod</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="lcid" Type="System.Int32" />
        <Parameter Name="matchOption" Type="Microsoft.SharePoint.Taxonomy.StringMatchOption" />
        <Parameter Name="resultCollectionSize" Type="System.Int32" />
        <Parameter Name="termIds" Type="System.String" />
        <Parameter Name="addIfNotFound" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="label">Text upon which to match <b>Terms</b>.</param>
        <param name="lcid">LCID of language to make matches against.</param>
        <param name="matchOption">
          <b>StartsWith</b> or <b>ExactMatch</b> to specify what type of matching is to be used.</param>
        <param name="resultCollectionSize">Maximum number of <b>Term</b> objects to be returned.</param>
        <param name="termIds">To be added.</param>
        <param name="addIfNotFound">If <paramref name="matchOption" /> is <b>ExactMatch</b> and no match is found and this flag is set to <b>true</b>, a new Term will be added to the <see cref="T:Microsoft.SharePoint.TermStore" /> object.</param>
        <summary>Gets <see cref="T:Microsoft.SharePoint.Taxonomy.Term" /> objects that match the search label.</summary>
        <returns>
          <b>Terms</b> which match the specified label.</returns>
        <remarks>
          <para>The serialization of the result as well as parameters is fully described in the protocol document MS-EMMWS.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTermSets">
      <MemberSignature Language="C#" Value="public string GetTermSets (string sharedServiceIds, string termSetIds, int lcid, string clientTimeStamps, string clientVersions, out string serverTermSetTimeStampXml);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTermSets(string sharedServiceIds, string termSetIds, int32 lcid, string clientTimeStamps, string clientVersions, [out] string&amp; serverTermSetTimeStampXml) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SharePoint.Taxonomy.WebServices.TaxonomyClientService.GetTermSets(System.String,System.String,System.Int32,System.String,System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTermSets (sharedServiceIds As String, termSetIds As String, lcid As Integer, clientTimeStamps As String, clientVersions As String, ByRef serverTermSetTimeStampXml As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTermSets(System::String ^ sharedServiceIds, System::String ^ termSetIds, int lcid, System::String ^ clientTimeStamps, System::String ^ clientVersions, [Runtime::InteropServices::Out] System::String ^ % serverTermSetTimeStampXml);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.SharePoint.Taxonomy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Web.Services.WebMethod</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sharedServiceIds" Type="System.String" />
        <Parameter Name="termSetIds" Type="System.String" />
        <Parameter Name="lcid" Type="System.Int32" />
        <Parameter Name="clientTimeStamps" Type="System.String" />
        <Parameter Name="clientVersions" Type="System.String" />
        <Parameter Name="serverTermSetTimeStampXml" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="sharedServiceIds">Collection of TermStore IDs that TermSets belong to.</param>
        <param name="termSetIds">To be added.</param>
        <param name="lcid">LCID of language that labels will be returned in.</param>
        <param name="clientTimeStamps">Collection of TimeStamps which are the last edit time of TermSets stored on the client.</param>
        <param name="clientVersions">Collection of versions of the server that each TermSet was downloaded from (always 1 unless the client doesn't have the TermSet, then it is 0).</param>
        <param name="serverTermSetTimeStampXml">Returns the collection of <b>TimeStamps</b> of the last edit time of each <b>TermSet</b>.</param>
        <summary>Gets a <see cref="T:Microsoft.SharePoint.Taxonomy.TermSet" /> object and all its <see cref="T:Microsoft.SharePoint.Taxonomy.Term" /> objects if the client <b>TimeStamp</b> is older than the server <b>TimeStamp</b> on the <see cref="T:Microsoft.SharePoint.Taxonomy.TermSet" /> object, or if the client version is older than the server version</summary>
        <returns>An XML string which includes the <b>TermSet</b> and all its <b>Term</b> objects. If the client <b>TimeStamp</b> is same as the last edit server timestamp then a placeholder is returned.</returns>
        <remarks>
          <para>The serialization of the result as well as parameters is fully described in the protocol document MS-EMMWS.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>