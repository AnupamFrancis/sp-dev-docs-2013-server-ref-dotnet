<Type Name="Contact" FullName="Microsoft.Office.Workflow.Utility.Contact">
  <TypeSignature Language="C#" Value="public sealed class Contact" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Contact extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Workflow.Utility.Contact" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Contact" />
  <TypeSignature Language="C++ CLI" Value="public ref class Contact sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents data from the Contact Selector control.</summary>
    <remarks>
      <para>Use the functions in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class to extract data from the Contact Selector control.</para>
      <para>For an example of how to use the members in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class, see the example in ExpandGroups method.  </para>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Workflow.Utility.Contact.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the display name of a person or a group.</summary>
        <value>The display name of the person or group.</value>
        <remarks>
          <para>For an example of how to use the <see cref="P:Microsoft.Office.Workflow.Utility.Contact.DisplayName" /> property, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmailAddress">
      <MemberSignature Language="C#" Value="public string EmailAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmailAddress" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Workflow.Utility.Contact.EmailAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EmailAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ EmailAddress { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the e-mail address of a person or a group.</summary>
        <value>The e-mail address of the person or group.</value>
        <remarks>
          <para>For an example of how to use the <see cref="P:Microsoft.Office.Workflow.Utility.Contact.EmailAddress" /> property, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Microsoft.Office.Workflow.Utility.Contact c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(class Microsoft.Office.Workflow.Utility.Contact c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.Equals(Microsoft.Office.Workflow.Utility.Contact)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (c As Contact) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Microsoft::Office::Workflow::Utility::Contact ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="Microsoft.Office.Workflow.Utility.Contact" />
      </Parameters>
      <Docs>
        <param name="c">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandGroups">
      <MemberSignature Language="C#" Value="public static Microsoft.Office.Workflow.Utility.Contact[] ExpandGroups (Microsoft.SharePoint.SPWeb web, Microsoft.Office.Workflow.Utility.Contact[] reviewers, int maxCount, out bool reachedMaxCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Office.Workflow.Utility.Contact[] ExpandGroups(class Microsoft.SharePoint.SPWeb web, class Microsoft.Office.Workflow.Utility.Contact[] reviewers, int32 maxCount, [out] bool&amp; reachedMaxCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.ExpandGroups(Microsoft.SharePoint.SPWeb,Microsoft.Office.Workflow.Utility.Contact[],System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExpandGroups (web As SPWeb, reviewers As Contact(), maxCount As Integer, ByRef reachedMaxCount As Boolean) As Contact()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Microsoft::Office::Workflow::Utility::Contact ^&gt; ^ ExpandGroups(Microsoft::SharePoint::SPWeb ^ web, cli::array &lt;Microsoft::Office::Workflow::Utility::Contact ^&gt; ^ reviewers, int maxCount, [Runtime::InteropServices::Out] bool % reachedMaxCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Workflow.Utility.Contact[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="web" Type="Microsoft.SharePoint.SPWeb" />
        <Parameter Name="reviewers" Type="Microsoft.Office.Workflow.Utility.Contact[]" />
        <Parameter Name="maxCount" Type="System.Int32" />
        <Parameter Name="reachedMaxCount" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="web">The SharePoint Web site to look for the group.</param>
        <param name="reviewers">Array of <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> objects to expand.</param>
        <param name="maxCount">The maximum number of users to expand to. </param>
        <param name="reachedMaxCount">If highest member count is reached, then <b>true</b>; otherwise, <b>false</b>.</param>
        <summary>Recursively expands any security groups, SharePoint groups, or distribution lists into individual users, given an array of <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> objects.</summary>
        <returns>Array of <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> objects representing individual users. </returns>
        <remarks>
          <para>The array is a string array.  </para>
          <para>The following sample uses a Contact Selector ActiveX control in a Microsoft Office InfoPath 2007 form and uses the <b>System.Workflow.Activities.ReplicatorActivity</b> class to create tasks for each user, either sequentially or in parallel depending on what the user specifies in the form. It also uses the <b>WssTaskActivity</b> class from the ECMActivities sample to manage tasks inside the Replicator activity.</para>
          <para>Form data is parsed by using the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> and <see cref="Microsoft.Office.Workflow.Utility.Form" /> classes.</para>
          <para>For more information about this sample, see the ApprovalWorkflowSample code sample folder and EnterpriseContentManagementStarterKitSampleGuide document in the ECM Starter Kit folder in the <a href="http://www.microsoft.com/downloads/details.aspx?familyid=6d94e307-67d9-41ac-b2d6-0074d6286fa9&amp;displaylang=en">Microsoft Office SharePoint Server 2007 SDK download</a></para>
          <para />
        </remarks>
        <example>
          <code>/**********************************************************************
 * Approval Sample Workflow
 * 
 * This workflow is a sample approval workflow. This workflow 
 * demonstrates how to use a serial/parallel workflow, workflow 
 * modifications, history events, and custom states. **********************************************************************/

using System;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Text;
using System.Workflow.Activities;
using System.Workflow.Activities.Rules;
using System.Workflow.ComponentModel;
using System.Workflow.ComponentModel.Compiler;
using System.Workflow.ComponentModel.Design;
using System.Workflow.ComponentModel.Serialization;
using System.Workflow.Runtime;
using System.Xml;
using System.Xml.Serialization;

using Microsoft.Office.Workflow.Utility;
using Microsoft.SharePoint;
using Microsoft.SharePoint.Utilities;
using Microsoft.SharePoint.Workflow;
using Microsoft.SharePoint.WorkflowActions;
using Microsoft.Office.Samples.ECM.Activities;

namespace Microsoft.Office.Samples.ECM.Workflow
{
    /// &amp;lt;summary&amp;gt;
    /// A sample approval workflow.
    /// &amp;lt;/summary&amp;gt;
      public sealed partial class ApprovalWorkflowSample: SequentialWorkflowActivity
    {
        #region Public Members

        // Identifier.
        public Guid workflowId = Guid.Empty;

        // Workflow properties.
        public int workflowState = -1;
        public bool isWorkflowCanceled = false;
        public bool isWorkflowRejected = false;
        public SPWorkflowActivationProperties workflowProperties = new SPWorkflowActivationProperties();

        // Replicator data.
        public IList replicatorInitialChildData = null;
        public ExecutionType replicatorExecutionType = ExecutionType.Sequence;

        // Task data.
        public Hashtable initFormData = null;
        public Contact workflowOriginator = null;
        public string workflowName = null;
        public string itemDisplayName = null;        

        // Add approver modification.
        public string addApproverData = null;
        public int addApproverUser = default(int);
        public string addApproverHistoryDescription = null;

        // Cancel workflow modification data.
        public string cancelWorkflowData = null;
        public string cancelWorkflowUser = null;
        public SPWorkflowTaskProperties cancelTaskProperties = null;

        // Update task modification data.
        public string updateTaskData = null;
        public int updateTaskUser = default(int);
        public string updateTaskHistoryDescription = null;
        public SPWorkflowTaskProperties updateTaskProperties = null;

        public const int MaxExpansionCount = 100;

        #endregion

        #region Public Constructors

        /// &amp;lt;summary&amp;gt;
        /// Default constructor.
        /// &amp;lt;/summary&amp;gt;
        public ApprovalWorkflowSample()
        {
            InitializeComponent();
        }

        #endregion

        #region Workflow Methods

        /// &amp;lt;summary&amp;gt;
        /// Initializes the workflow. 
        /// Parse the data from the form XML string by using the 
        /// Form and Contact classes in the 
        /// Microsoft.Office.Workflow.Utility namespace.
        /// &amp;lt;/summary&amp;gt;
        private void OnWorkflowActivated(object sender, ExternalDataEventArgs e)
        {
            // Convert the initiation form data to a hash table.
            this.initFormData = Form.&lt;span class="label"&gt;XmlToHashtable&lt;/span&gt;(this.workflowProperties.InitiationData);

            // Retrieve the add approver form data.
            this.addApproverData = this.workflowProperties.Workflow.ParentAssociation["Modification_af71f77b-e6c8-483a-acbf-30b4a84bd209_Data"] as string;

            // Retrieve the cancel workflow form data.
            this.cancelWorkflowData = this.workflowProperties.Workflow.ParentAssociation["Modification_b21bcc38-2c23-4b64-8e7d-c32c43ad42cf_Data"] as string;

            // Retrieve the update all tasks form data.
            this.updateTaskData = this.workflowProperties.Workflow.ParentAssociation["Modification_27f914ae-3112-493d-86cf-43dc93870418_Data"] as string;

            // Get the originator of the workflow.
            this.workflowOriginator = Contact.&lt;span class="label"&gt;FromPrincipal&lt;/span&gt;(this.workflowProperties.OriginatorUser);
            this.workflowName = this.workflowProperties.Workflow.ParentAssociation.Name;
            this.itemDisplayName = this.workflowProperties.Item.DisplayName;

            // Set the replicator execution type.
            this.replicatorExecutionType = (this.initFormData["CreateTasksInSerial"] as string) == "true" ?
                ExecutionType.Sequence : ExecutionType.Parallel;

            // Use the built-in methods to parse out the people.
            Contact[] contacts = Contact.&lt;span class="label"&gt;ToContacts&lt;/span&gt;((this.initFormData["Reviewers"] as string), this.workflowProperties.Web);

            // Determine whether to expand the groups that were 
            // entered into the form.
            if ((this.initFormData["GroupTasks"] as string) == "false")
            {
                // Expand the groups (recursively).
                bool &lt;span class="label"&gt;reachedMaxCount&lt;/span&gt; = false;
                contacts = Contact.ExpandGroups(this.workflowProperties.Web, contacts,
                    ApprovalWorkflowSample.MaxExpansionCount, out &lt;span class="label"&gt;reachedMaxCount&lt;/span&gt;);
            }

            // Add the data to the replicator so that you can 
            // generate a task for each contact.
            // The replicator will create a child for each item 
            // in the list.
            this.replicatorInitialChildData = new List&amp;lt;SPWorkflowTaskProperties&amp;gt;();

            // Determine the due date of the task (if any).
            DateTime dueDate = DateTime.MinValue;

            // Due date from a serial approval workflow.
            if ((this.replicatorExecutionType == ExecutionType.Sequence) &amp;amp;&amp;amp; (!string.IsNullOrEmpty(this.initFormData["TimePerTaskVal"] as string)))
            {
                dueDate = DateTime.Now.AddDays(Convert.ToInt32(this.initFormData["TimePerTaskVal"]));
            }
            // Due date from a parallel approval workflow.
            else if ((this.replicatorExecutionType == ExecutionType.Parallel) &amp;amp;&amp;amp; (!string.IsNullOrEmpty(this.initFormData["DueDate"] as string)))
            {
                dueDate = Convert.ToDateTime(this.initFormData["DueDate"]);
            }            

            // Prepare the replicator data.
            string contactNames = "";

            foreach (Contact contact in contacts)
            {
                contactNames += string.Format(" {0},", contact.&lt;span class="label"&gt;DisplayName&lt;/span&gt;);

                SPWorkflowTaskProperties taskProperties = new SPWorkflowTaskProperties();
                taskProperties.AssignedTo = contact.&lt;span class="label"&gt;LoginName&lt;/span&gt;;
                taskProperties.Description = string.IsNullOrEmpty(this.initFormData["Description"] as string) ? "No instructions were provided." : this.initFormData["Description"] as string;
                taskProperties.DueDate = dueDate;

                this.replicatorInitialChildData.Add(taskProperties);
            }

            // Trim the trailing ',' from the string.
            contactNames = contactNames.Substring(0, contactNames.Length - 1);

            // Set the Windows SharePoint Services user ID 
            // of the workflow originator.
            int workflowOriginatorId = this.workflowOriginator.&lt;span class="label"&gt;PrincipalID&lt;/span&gt;;

            // Set up the "workflow started" history data.
            this.logWorkflowStartedHistoryActivity.HistoryDescription = string.Format("{0} was started.  Participants:{1}",
                this.workflowName, contactNames);
            this.logWorkflowStartedHistoryActivity.UserId = workflowOriginatorId;

            // Set up the "workflow completed" history data.
            this.logWorkflowCompletedHistoryActivity.HistoryDescription = string.Format("{0} was completed.", this.workflowName);
            this.logWorkflowCompletedHistoryActivity.HistoryOutcome = string.Format("{0} on {1} has successfully completed. All participants have completed their tasks.",
                this.workflowName, this.itemDisplayName);
            this.logWorkflowCompletedHistoryActivity.UserId = workflowOriginatorId;
        }

        /// &amp;lt;summary&amp;gt;
        /// Initializes and creates the tasks for each replicator child 
        /// (see the WssTaskActivity class in the 
        /// Microsoft.Office.Samples.ECM.Activities sample 
        /// for details).
        /// &amp;lt;/summary&amp;gt;
        private void OnReplicatorChildInitialized(object sender, ReplicatorChildEventArgs e)
        {
            // Retrieve the activities.
            WssTaskActivity task = e.Activity as WssTaskActivity;            
            task.createWssTask_TaskProperties1 = (SPWorkflowTaskProperties)e.InstanceData;

            // Set up the task.
            task.TaskId = Guid.NewGuid();

            // Add the user to the infotable in Windows SharePoint 
            // Services (if possible) and 
            // allows checking for users that cannot 
            // be assigned a task.
            Contact contact = Contact.&lt;span class="label"&gt;FromName&lt;/span&gt;(task.createWssTask_TaskProperties1.AssignedTo, this.workflowProperties.Web);
            SPPrincipal contactPrincipal = contact.&lt;span class="label"&gt;GetPrincipal&lt;/span&gt;(this.workflowProperties.Web);

            if ((contactPrincipal == null) || (contactPrincipal.ID == -1))
            {
                // Cannot assign the task to this principal,
                // so try the workflow owner.
                task.createWssTask_TaskProperties1.AssignedTo = this.workflowOriginator.LoginName;
                task.createWssTask_TaskProperties1.Title = string.Format("Please approve {0} (external participant)", this.itemDisplayName);
                task.createWssTask_TaskProperties1.OnBehalfEmail = contact.&lt;span class="label"&gt;EmailAddress&lt;/span&gt;;
                task.createWssTask_TaskProperties1.OnBehalfReason = "This user does not have access to this Windows SharePoint Server site.";
                task.TaskAssignedTo = this.workflowOriginator;
            }
            else
            {
                // Normal task.
                task.createWssTask_TaskProperties1.Title = string.Format("Please approve {0}", this.itemDisplayName);
                task.TaskAssignedTo = contact;
            }

            // Update the unescaped description text, 
            // which is displayed in the Infopath form.
    task.createWssTask_TaskProperties1.ExtendedProperties["BodyText"] = SPHttpUtility.HtmlDecode(task.createWssTask_TaskProperties1.Description);

            // Set the remaining values.
            task.createWssTask_TaskProperties1.PercentComplete = 0;
            task.createWssTask_TaskProperties1.SendEmailNotification = true;
            task.createWssTask_TaskProperties1.StartDate = DateTime.Now;
            task.createWssTask_TaskProperties1.TaskType = Convert.ToInt32(this.initFormData["DefaultTaskType"]);
            
            // Set the "created by" user.
            if (task.TaskCreatedBy == null)
            {
                task.TaskCreatedBy = this.workflowOriginator;
            }
        }
        
        /// &amp;lt;summary&amp;gt;
        /// Determine if the replicator is done yet.
        /// &amp;lt;/summary&amp;gt;
        private void IsReplicatorDone(object sender, ConditionalEventArgs e)
        {
            // Check if all the replicator children have completed.
            e.Result = this.taskReplicator1.AllChildrenComplete;
        }

        /// &amp;lt;summary&amp;gt;
        /// Handler for WssTaskActivity.IsTaskCompleted property, 
        /// which is fired when a task is changed.
        /// TaskEventArgs contains the 
        /// SPWorkflowTaskProperties (AfterProperties) that
        /// contain the new values in the task that changed.  
        /// The task is complete if the Completed field is true.
        /// &amp;lt;/summary&amp;gt;
        private void IsTaskCompleted(object sender, TaskEventArgs e)
        {
            // Get the task data.
            WssTaskActivity task = sender as WssTaskActivity;

            // Get the name of the user who performed this action.
            Contact contact = Contact.&lt;span class="label"&gt;FromName&lt;/span&gt;(e.Executor, this.workflowProperties.Web);

            // Get the task result - # and @ in the "TaskStatus" field 
            // indicate a completion.
            string taskResult = e.AfterProperties.ExtendedProperties["TaskStatus"] as string;

            bool isTaskRejected = (taskResult == "@");
            e.Result = isTaskRejected || (taskResult == "#");                       

            // Single rejection rejects the entire workflow.
            if (isTaskRejected)
            {
                this.isWorkflowRejected = true;
            }

            // Checks if the task is completed.
            if (e.Result)
            {
                task.TaskChangedBy = contact;
                task.TaskCompletedBy = contact;
                task.completeWssTask_TaskOutcome1 = isTaskRejected ? string.Format("Task rejected by {0}", contact.&lt;span class="label"&gt;DisplayName&lt;/span&gt;) : 
                    string.Format("Task approved by {0}", contact.DisplayName);                
            }
        }

        /// &amp;lt;summary&amp;gt;
        /// Handle a deleted task.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="sender"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        private void OnTaskDeleted(object sender, TaskEventArgs e)
        {
            // Get the task.
            WssTaskActivity task = sender as WssTaskActivity;

            // Get the name of the user who performed this action.
            Contact contact = Contact.&lt;span class="label"&gt;FromName&lt;/span&gt;(e.Executor, this.workflowProperties.Web);

            // Set the friendly name.
            task.TaskDeletedBy = contact;

            // Reject the workflow.
            this.isWorkflowRejected = true;
        }

        #endregion        
     
        #region Add Approver Modification

        /// &amp;lt;summary&amp;gt;
        /// This modification adds 1 or more approvers to the workflow.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="sender"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        private void OnAddApprover(object sender, ExternalDataEventArgs e)
        {
            Hashtable data = Form.XmlToHashtable(this.addApproverData);

            // Get the user who added a new user or users to the workflow.
            Contact identity = Contact.&lt;span class="label"&gt;FromName&lt;/span&gt;(e.Identity, this.workflowProperties.Web);

            // Get the new user or users to add.
            Contact[] contacts = Contact.&lt;span class="label"&gt;ToContacts&lt;/span&gt;((data["NewReviewers"] as string), this.workflowProperties.Web);

            // Prepare the replicator data.
            string contactNames = "";

            foreach (Contact contact in contacts)
            {
                contactNames += string.Format(" {0},", contact.&lt;span class="label"&gt;DisplayName&lt;/span&gt;);

                SPWorkflowTaskProperties taskProperties = new SPWorkflowTaskProperties();
                taskProperties.AssignedTo = contact.&lt;span class="label"&gt;LoginName&lt;/span&gt;;
                taskProperties.Description = string.IsNullOrEmpty(data["Description"] as string) ? "No instructions were provided." : data["Description"] as string;
                taskProperties.DueDate = string.IsNullOrEmpty(data["DueDate"] as string) ? DateTime.MinValue : Convert.ToDateTime(data["DueDate"] as string);

                // Add the task to the replicator.                this.taskReplicator1.CurrentChildData.Add(taskProperties);
            }
            
            // Trim the trailing ',' from the string.
            contactNames = contactNames.Substring(0, contactNames.Length - 1);

            // Set the description for the history event.
            this.addApproverHistoryDescription = string.Format("Participants for {0} on {1} were updated by {2}. New participants:{3}",
                this.workflowName, this.workflowProperties.Item.DisplayName, identity.DisplayName, contactNames);

            // Set the approver Windows SharePoint Services user ID.
            this.addApproverUser = identity.&lt;span class="label"&gt;PrincipalID&lt;/span&gt;;
        }

        #endregion

        #region Cancel Workflow Modification

        /// &amp;lt;summary&amp;gt;
        /// Cancels a workflow.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="sender"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        private void OnWorkflowCanceled(object sender, ExternalDataEventArgs e)
        {
            // Get the identity of the person canceling the workflow.
            SPModificationEventArgs args = e as SPModificationEventArgs;
            Contact identity = Contact.&lt;span class="label"&gt;FromName&lt;/span&gt;(e.Identity, this.workflowProperties.Web);

            //  the workflow as canceled.
            this.isWorkflowCanceled = true;

            // Update the completed history outcome.
            this.logWorkflowCompletedHistoryActivity.HistoryOutcome = 
                string.Format("{0} on {1} has ended because {2} has canceled the workflow.",
                this.workflowName, this.itemDisplayName, identity.DisplayName);

            // End the replicator - this is handled by the 
            // event that handles the scope fault handler.
            throw new CancelApprovalWorkflowSampleException();            
        }

        /// &amp;lt;summary&amp;gt;
        /// Mark all the existing tasks as complete.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="sender"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        private void UpdateAllTasksOnCancel(object sender, EventArgs e)
        {
            // Set all active tasks to completed.
            this.cancelTaskProperties = new SPWorkflowTaskProperties();
            this.cancelTaskProperties.ExtendedProperties[SPBuiltInFieldId.Completed] = true;
            this.cancelTaskProperties.ExtendedProperties[SPBuiltInFieldId.TaskStatus] = "Completed";
            this.cancelTaskProperties.ExtendedProperties[SPBuiltInFieldId.WorkflowOutcome] = "Canceled by the workflow";
        }

        #endregion        

        #region Update All Tasks Modification

        /// &amp;lt;summary&amp;gt;
        /// Update all active tasks.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="sender"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        private void OnUpdateAllTasks(object sender, ExternalDataEventArgs e)
        {
            Hashtable data = Form.XmlToHashtable(this.updateTaskData);
            this.updateTaskProperties = new SPWorkflowTaskProperties();

            // Get the user who updated the tasks.
            Contact identity = Contact.&lt;span class="label"&gt;FromName&lt;/span&gt;(e.Identity, this.workflowProperties.Web);

            // Fetch the due date and store it for future tasks.
            string dueDate = data["DueDate"] as string;

            // Fetch the description and store it for future tasks.
            this.updateTaskProperties.Description = 
                string.IsNullOrEmpty(data["Description"] as string) ? "No instructions were provided." : data["Description"] as string;

            // Update the unescaped text, which is displayed 
            // in the Infopath form.
            this.updateTaskProperties.ExtendedProperties["BodyText"] =
                SPHttpUtility.HtmlDecode(this.updateTaskProperties.Description);

            // Set the DateTime field, and then repurpose 
            // the dueDate variable.
            if (string.IsNullOrEmpty(dueDate))
            {
                this.updateTaskProperties.DueDate = DateTime.MinValue;
                dueDate = "None";
            }
            else
            {
                this.updateTaskProperties.DueDate = Convert.ToDateTime(dueDate);
                dueDate = this.updateTaskProperties.DueDate.ToShortDateString();
            }

            // Update the future tasks.
            foreach (SPWorkflowTaskProperties taskProperties in this.taskReplicator1.CurrentChildData)
            {
                taskProperties.Description = this.updateTaskProperties.Description;
                taskProperties.DueDate = this.updateTaskProperties.DueDate;
            }

            // Set the description for the history event.
            this.updateTaskHistoryDescription = string.Format("Tasks for {0} on {1} were updated by {2}. Due by: {3} Task instructions: {4}",
                this.workflowName, this.workflowProperties.Item.DisplayName, identity.DisplayName, dueDate, this.updateTaskProperties.Description);

            // Set the Windows SharePoint Services user ID 
            // of the person who updated the tasks.
            this.updateTaskUser = identity.&lt;span class="label"&gt;PrincipalID&lt;/span&gt;;
        }

        #endregion

        #region Set State

        /// &amp;lt;summary&amp;gt;
        /// Sets the state (Canceled, Rejected, Approved) of the 
        /// workflow. States are set in the workflow template file
        /// under Metadata/ExtendedStatusValues.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="sender"&amp;gt;&amp;lt;/param&amp;gt;
        /// &amp;lt;param name="e"&amp;gt;&amp;lt;/param&amp;gt;
        private void SetWorkflowState(object sender, EventArgs e)
        {
            // Checks if the workflow is canceled.
            if (this.isWorkflowCanceled)
            {
                this.workflowState = (int)SPWorkflowStatus.Max;
            }
            // Checks if the workflow is rejected.
            else if (this.isWorkflowRejected)
            {
                this.workflowState = (int)SPWorkflowStatus.Max + 2;
            }
            // The workflow is approved.
            else
            {
                this.workflowState = (int)SPWorkflowStatus.Max + 1;
            }
        }

        #endregion
    }

    public class CancelApprovalWorkflowSampleException : Exception
    { }
}</code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="FromDisplayNameAndEmailAddress">
      <MemberSignature Language="C#" Value="public static Microsoft.Office.Workflow.Utility.Contact FromDisplayNameAndEmailAddress (string name, string email);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Office.Workflow.Utility.Contact FromDisplayNameAndEmailAddress(string name, string email) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.FromDisplayNameAndEmailAddress(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromDisplayNameAndEmailAddress (name As String, email As String) As Contact" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Office::Workflow::Utility::Contact ^ FromDisplayNameAndEmailAddress(System::String ^ name, System::String ^ email);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Workflow.Utility.Contact</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="email" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Name of the user.</param>
        <param name="email">E-mail address of the user.</param>
        <summary>Gets a <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object for a user, given the user's display name and e-mail address.</summary>
        <returns>A <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object for the user.</returns>
        <remarks>
          <para>For an example of how to use some of the members in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static Microsoft.Office.Workflow.Utility.Contact FromName (string name, Microsoft.SharePoint.SPWeb web);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Office.Workflow.Utility.Contact FromName(string name, class Microsoft.SharePoint.SPWeb web) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.FromName(System.String,Microsoft.SharePoint.SPWeb)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromName (name As String, web As SPWeb) As Contact" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Office::Workflow::Utility::Contact ^ FromName(System::String ^ name, Microsoft::SharePoint::SPWeb ^ web);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Workflow.Utility.Contact</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="web" Type="Microsoft.SharePoint.SPWeb" />
      </Parameters>
      <Docs>
        <param name="name">Logon name of the user.</param>
        <param name="web">The Web site to look for the user.</param>
        <summary>Gets a <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object, given the name of a user.</summary>
        <returns>A <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object for the user.</returns>
        <remarks>
          <para>For an example of how to use the <see cref="M:Microsoft.Office.Workflow.Utility.Contact.FromName(System.String,Microsoft.SharePoint.SPWeb)" /> method, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPrincipal">
      <MemberSignature Language="C#" Value="public static Microsoft.Office.Workflow.Utility.Contact FromPrincipal (Microsoft.SharePoint.SPPrincipal principal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Office.Workflow.Utility.Contact FromPrincipal(class Microsoft.SharePoint.SPPrincipal principal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.FromPrincipal(Microsoft.SharePoint.SPPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPrincipal (principal As SPPrincipal) As Contact" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Office::Workflow::Utility::Contact ^ FromPrincipal(Microsoft::SharePoint::SPPrincipal ^ principal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Workflow.Utility.Contact</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="Microsoft.SharePoint.SPPrincipal" />
      </Parameters>
      <Docs>
        <param name="principal">An individual user or group.</param>
        <summary>Gets a <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object for a given principal object.</summary>
        <returns>A <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object for the principal.</returns>
        <remarks>
          <para>An individual user (<see cref="T:Microsoft.SharePoint.SPUser" />) gains access to a Windows SharePoint Services object directly through an individual role assignment, or indirectly through membership in either a domain group or a SharePoint group (<see cref="T:Microsoft.SharePoint.SPGroup" />) that has a role assignment. In a direct role assignment, the user is the principal (<see cref="T:Microsoft.SharePoint.SPPrincipal" />), while in a domain group or SharePoint group role assignment, the domain group or SharePoint group is the principal.</para>
          <para>For more information about principal objects, see Authorization object relations and object model in the Microsoft Windows SharePoint Services 3.0 SDK.</para>
          <para>For an example of how to use the <see cref="M:Microsoft.Office.Workflow.Utility.Contact.FromPrincipal(Microsoft.SharePoint.SPPrincipal)" /> method, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPrincipalID">
      <MemberSignature Language="C#" Value="public static Microsoft.Office.Workflow.Utility.Contact FromPrincipalID (int id, Microsoft.SharePoint.SPWeb web);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Office.Workflow.Utility.Contact FromPrincipalID(int32 id, class Microsoft.SharePoint.SPWeb web) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.FromPrincipalID(System.Int32,Microsoft.SharePoint.SPWeb)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPrincipalID (id As Integer, web As SPWeb) As Contact" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Office::Workflow::Utility::Contact ^ FromPrincipalID(int id, Microsoft::SharePoint::SPWeb ^ web);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Workflow.Utility.Contact</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="web" Type="Microsoft.SharePoint.SPWeb" />
      </Parameters>
      <Docs>
        <param name="id">Unique identifier of the principal.</param>
        <param name="web">Web site to search for the principal.</param>
        <summary>Gets a <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object for a user or group, given the unique identifier of the principal.</summary>
        <returns>A <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object for the principal.</returns>
        <remarks>
          <para>An individual user (<see cref="T:Microsoft.SharePoint.SPUser" />) gains access to a Windows SharePoint Services object directly through an individual role assignment, or indirectly through membership in either a domain group or a SharePoint group (<see cref="T:Microsoft.SharePoint.SPGroup" />) that has a role assignment. In a direct role assignment, the user is the principal (<see cref="T:Microsoft.SharePoint.SPPrincipal" />), while in a domain group or SharePoint group role assignment, the domain group or SharePoint group is the principal.</para>
          <para>For more information about principal objects, see Authorization object relations and object model in the Microsoft Windows SharePoint Services 3.0 SDK.</para>
          <para>For an example of how to use some of the members in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPrincipalInfo">
      <MemberSignature Language="C#" Value="public static Microsoft.Office.Workflow.Utility.Contact FromPrincipalInfo (Microsoft.SharePoint.Utilities.SPPrincipalInfo pi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Office.Workflow.Utility.Contact FromPrincipalInfo(class Microsoft.SharePoint.Utilities.SPPrincipalInfo pi) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.FromPrincipalInfo(Microsoft.SharePoint.Utilities.SPPrincipalInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPrincipalInfo (pi As SPPrincipalInfo) As Contact" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Office::Workflow::Utility::Contact ^ FromPrincipalInfo(Microsoft::SharePoint::Utilities::SPPrincipalInfo ^ pi);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Workflow.Utility.Contact</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pi" Type="Microsoft.SharePoint.Utilities.SPPrincipalInfo" />
      </Parameters>
      <Docs>
        <param name="pi">Information about the principal, for example, display name, job title, the department the principal belongs to, e-mail address and so on.</param>
        <summary>Gets a <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object, given the information about the principal.</summary>
        <returns>A <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object of the principal.</returns>
        <remarks>
          <para>An individual user (<see cref="T:Microsoft.SharePoint.SPUser" />) gains access to a Windows SharePoint Services object directly through an individual role assignment, or indirectly through membership in either a domain group or a SharePoint group (<see cref="T:Microsoft.SharePoint.SPGroup" />) that has a role assignment. In a direct role assignment, the user is the principal (<see cref="T:Microsoft.SharePoint.SPPrincipal" />), while in a domain group or SharePoint group role assignment, the domain group or SharePoint group is the principal.</para>
          <para>For more information about principal objects, see Authorization object relations and object model in the Microsoft Windows SharePoint Services 3.0 SDK.</para>
          <para>For an example of how to use some of the members in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromSharePointUserString">
      <MemberSignature Language="C#" Value="public static Microsoft.Office.Workflow.Utility.Contact FromSharePointUserString (string strId, Microsoft.SharePoint.SPWeb web);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Office.Workflow.Utility.Contact FromSharePointUserString(string strId, class Microsoft.SharePoint.SPWeb web) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.FromSharePointUserString(System.String,Microsoft.SharePoint.SPWeb)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSharePointUserString (strId As String, web As SPWeb) As Contact" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Office::Workflow::Utility::Contact ^ FromSharePointUserString(System::String ^ strId, Microsoft::SharePoint::SPWeb ^ web);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Workflow.Utility.Contact</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strId" Type="System.String" />
        <Parameter Name="web" Type="Microsoft.SharePoint.SPWeb" />
      </Parameters>
      <Docs>
        <param name="strId">SharePoint user string, for example, "1;# ".</param>
        <param name="web">The Web site to look for the user.</param>
        <summary>Gets a <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object, given a SharePoint user string.</summary>
        <returns>A <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object for the user.</returns>
        <remarks>
          <para>For an example of how to use some of the members in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrincipal">
      <MemberSignature Language="C#" Value="public Microsoft.SharePoint.SPPrincipal GetPrincipal (Microsoft.SharePoint.SPWeb web);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.SharePoint.SPPrincipal GetPrincipal(class Microsoft.SharePoint.SPWeb web) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.GetPrincipal(Microsoft.SharePoint.SPWeb)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrincipal (web As SPWeb) As SPPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::SharePoint::SPPrincipal ^ GetPrincipal(Microsoft::SharePoint::SPWeb ^ web);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SharePoint.SPPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="web" Type="Microsoft.SharePoint.SPWeb" />
      </Parameters>
      <Docs>
        <param name="web">The Web site to look for the user.</param>
        <summary>Gets the <see cref="T:Microsoft.SharePoint.SPPrincipal" /> object for the contact.</summary>
        <returns>An <see cref="T:Microsoft.SharePoint.SPPrincipal" /> object of the principal.</returns>
        <remarks>
          <para>An individual user (<see cref="T:Microsoft.SharePoint.SPUser" />) gains access to a Windows SharePoint Services object directly through an individual role assignment, or indirectly through membership in either a domain group or a SharePoint group (<see cref="T:Microsoft.SharePoint.SPGroup" />) that has a role assignment. In a direct role assignment, the user is the principal (<see cref="T:Microsoft.SharePoint.SPPrincipal" />), while in a domain group or SharePoint group role assignment, the domain group or SharePoint group is the principal.</para>
          <para>For more information about principal, see Authorization object relations and object model in the Microsoft Windows SharePoint Services 3.0 SDK.</para>
          <para>For an example of how to the <see cref="M:Microsoft.Office.Workflow.Utility.Contact.GetPrincipal(Microsoft.SharePoint.SPWeb)" /> method, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCollection">
      <MemberSignature Language="C#" Value="public bool IsCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCollection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Workflow.Utility.Contact.IsCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCollection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object represents a collection.</summary>
        <value>If <b>true</b>, the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> object represents a collection; otherwise, <b>false</b>.</value>
        <remarks>
          <para>For an example of how to use some of the members in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSPUser">
      <MemberSignature Language="C#" Value="public bool IsSPUser { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSPUser" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Workflow.Utility.Contact.IsSPUser" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSPUser As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSPUser { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether a person is a user of Microsoft Windows SharePoint Services.</summary>
        <value>If <b>true</b>, the person is a Microsoft Windows SharePoint Services user or security group; otherwise, <b>false</b>.</value>
        <remarks>
          <para>For an example of how to use some of the members in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginName">
      <MemberSignature Language="C#" Value="public string LoginName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LoginName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Workflow.Utility.Contact.LoginName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LoginName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LoginName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the logon name of a person or group.</summary>
        <value>The logon name of the person or group.</value>
        <remarks>
          <para>For an example of how to use the <see cref="P:Microsoft.Office.Workflow.Utility.Contact.LoginName" /> property, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrincipalID">
      <MemberSignature Language="C#" Value="public int PrincipalID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PrincipalID" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Workflow.Utility.Contact.PrincipalID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrincipalID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PrincipalID { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the unique identifier for the principal object.</summary>
        <value>The unique identifier for the principal object.</value>
        <remarks>
          <para>An individual user (<see cref="T:Microsoft.SharePoint.SPUser" />) gains access to a Windows SharePoint Services object directly through an individual role assignment, or indirectly through membership in either a domain group or a SharePoint group (<see cref="T:Microsoft.SharePoint.SPGroup" />) that has a role assignment. In a direct role assignment, the user is the principal (<see cref="T:Microsoft.SharePoint.SPPrincipal" />), while in a domain group or SharePoint group role assignment, the domain group or SharePoint group is the principal.</para>
          <para>For more information about principal objects, see Authorization object relations and object model in the Microsoft Windows SharePoint Services 3.0 SDK.</para>
          <para>For an example of how to use the <see cref="P:Microsoft.Office.Workflow.Utility.Contact.PrincipalID" /> property, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrincipalType">
      <MemberSignature Language="C#" Value="public Microsoft.SharePoint.Utilities.SPPrincipalType PrincipalType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.SharePoint.Utilities.SPPrincipalType PrincipalType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Workflow.Utility.Contact.PrincipalType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrincipalType As SPPrincipalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::SharePoint::Utilities::SPPrincipalType PrincipalType { Microsoft::SharePoint::Utilities::SPPrincipalType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SharePoint.Utilities.SPPrincipalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of principal object.</summary>
        <value>An <see cref="T:Microsoft.SharePoint.Utilities.SPPrincipalType" /> object for the contact.</value>
        <remarks>
          <para>An individual user (<see cref="T:Microsoft.SharePoint.SPUser" />) gains access to a Windows SharePoint Services object directly through an individual role assignment, or indirectly through membership in either a domain group or a SharePoint group (<see cref="T:Microsoft.SharePoint.SPGroup" />) that has a role assignment. In a direct role assignment, the user is the principal (<see cref="T:Microsoft.SharePoint.SPPrincipal" />), while in a domain group or SharePoint group role assignment, the domain group or SharePoint group is the principal.</para>
          <para>For more information about principals, see Authorization object relations and object modelin the Microsoft Windows SharePoint Services 3.0 SDK.</para>
          <para>The type of principal can be a user, a distribution list (DL), a SharePoint group, a security group, and so on. For more information about principal types, see the <see cref="T:Microsoft.SharePoint.Utilities.SPPrincipalType" /> enumeration in the Microsoft Windows SharePoint Services 3.0 SDK. </para>
          <para>For an example of how to use some of the members in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrincipalTypeIsSPUser">
      <MemberSignature Language="C#" Value="public static bool PrincipalTypeIsSPUser (Microsoft.SharePoint.Utilities.SPPrincipalType principalType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrincipalTypeIsSPUser(valuetype Microsoft.SharePoint.Utilities.SPPrincipalType principalType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.PrincipalTypeIsSPUser(Microsoft.SharePoint.Utilities.SPPrincipalType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrincipalTypeIsSPUser (principalType As SPPrincipalType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrincipalTypeIsSPUser(Microsoft::SharePoint::Utilities::SPPrincipalType principalType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalType" Type="Microsoft.SharePoint.Utilities.SPPrincipalType" />
      </Parameters>
      <Docs>
        <param name="principalType">Type of principal, for example, a user, a distribution list (DL), a SharePoint group, a security group, and so on. </param>
        <summary>Checks whether a principal is a user or a security group in Microsoft Windows SharePoint Services.</summary>
        <returns>If <b>true</b>, the principal is a user of Microsoft Windows SharePoint Services; otherwise, <b>false</b>.</returns>
        <remarks>
          <para>An individual user (<see cref="T:Microsoft.SharePoint.SPUser" />) gains access to a Windows SharePoint Services object directly through an individual role assignment, or indirectly through membership in either a domain group or a SharePoint group (<see cref="T:Microsoft.SharePoint.SPGroup" />) that has a role assignment. In a direct role assignment, the user is the principal (<see cref="T:Microsoft.SharePoint.SPPrincipal" />), while in a domain group or SharePoint group role assignment, the domain group or SharePoint group is the principal.</para>
          <para>For more information about principal, see Authorization object relations and object model topic in the Microsoft Windows SharePoint Services 3.0 SDK. For more information about principal types, see the <see cref="T:Microsoft.SharePoint.Utilities.SPPrincipalType" /> enumeration in the Microsoft Windows SharePoint Services 3.0 SDK. </para>
          <para>For an example of how to use some of the members in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToContacts">
      <MemberSignature Language="C#" Value="public static Microsoft.Office.Workflow.Utility.Contact[] ToContacts (string inputXml, Microsoft.SharePoint.SPWeb web);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Office.Workflow.Utility.Contact[] ToContacts(string inputXml, class Microsoft.SharePoint.SPWeb web) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.ToContacts(System.String,Microsoft.SharePoint.SPWeb)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToContacts (inputXml As String, web As SPWeb) As Contact()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Microsoft::Office::Workflow::Utility::Contact ^&gt; ^ ToContacts(System::String ^ inputXml, Microsoft::SharePoint::SPWeb ^ web);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Workflow.Utility.Contact[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputXml" Type="System.String" />
        <Parameter Name="web" Type="Microsoft.SharePoint.SPWeb" />
      </Parameters>
      <Docs>
        <param name="inputXml">The Contact Selector XML string, starting with the first person tag.</param>
        <param name="web">The Web site to look for the users.</param>
        <summary>Parses contacts from a string of XML and creates an array of <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> objects from the hash table.</summary>
        <returns>An array that stores the results parsed by this method.</returns>
        <remarks>
          <para>For an example of how to use the <see cref="M:Microsoft.Office.Workflow.Utility.Contact.ToContacts(System.String,Microsoft.SharePoint.SPWeb)" /> method, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPersonXml">
      <MemberSignature Language="C#" Value="public static string ToPersonXml (Microsoft.Office.Workflow.Utility.Contact contact);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToPersonXml(class Microsoft.Office.Workflow.Utility.Contact contact) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.ToPersonXml(Microsoft.Office.Workflow.Utility.Contact)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToPersonXml(Microsoft::Office::Workflow::Utility::Contact ^ contact);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contact" Type="Microsoft.Office.Workflow.Utility.Contact" />
      </Parameters>
      <Docs>
        <param name="contact">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Workflow.Utility.Contact.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the current object.</summary>
        <returns>A <b>string</b> that represents the current object.</returns>
        <remarks>
          <para>For an example of how to use some of the members in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xml">
      <MemberSignature Language="C#" Value="public string Xml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Xml" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Workflow.Utility.Contact.Xml" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Xml As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Xml { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Pages</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Workflow.Tasks</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the XML for the contact.</summary>
        <value>The XML data.</value>
        <remarks>
          <para>For an example of how to use some of the members in the <see cref="T:Microsoft.Office.Workflow.Utility.Contact" /> class, see the example in ExpandGroups method.  </para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>