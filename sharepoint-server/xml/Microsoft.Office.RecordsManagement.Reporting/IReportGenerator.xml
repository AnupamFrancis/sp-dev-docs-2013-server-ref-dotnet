<Type Name="IReportGenerator" FullName="Microsoft.Office.RecordsManagement.Reporting.IReportGenerator">
  <TypeSignature Language="C#" Value="public interface IReportGenerator : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReportGenerator implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.RecordsManagement.Reporting.IReportGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReportGenerator&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IReportGenerator : IDisposable" />
  <TypeSignature Language="F#" Value="type IReportGenerator = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Policy</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Defines a report generator and its interaction with the reporting engine.</summary>
    <remarks>
      <para>When running a report, the reporting engine interacts with a reporting data source implementing <see cref="T:Microsoft.Office.RecordsManagement.Reporting.IReportDataSource" /> interface and a report generator implementing the <b>IReportGenerator</b> interface.</para>
      <para>The reporting engine calls the <see cref="M:Microsoft.Office.RecordsManagement.Reporting.IReportGenerator.StartReport(Stream,Hashtable)" /> method to start a report, and it calls the <see cref="M:Microsoft.Office.RecordsManagement.Reporting.IReportDataSource.StartQuery(SPSite,Hashtable)" /> method to query for reporting data, followed by <see cref="M:Microsoft.Office.RecordsManagement.Reporting.IReportDataSource.StartReport(Hashtable)" /> to start the report. Then, for each row defined in the report generator, it calls <see cref="M:Microsoft.Office.RecordsManagement.Reporting.IReportDataSource.GetNextDataRow()" /> to get data for the next row. When the report generator has reached the maximum row limit, the reporting engine ends the report by calling the <see cref="M:Microsoft.Office.RecordsManagement.Reporting.IReportGenerator.EndReport()" /> method, and checks if there is more data to report by using the <see cref="IReportDataSource.HasMoreData" /> method.</para>
      <para />
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="EndReport">
      <MemberSignature Language="C#" Value="public void EndReport ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndReport() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.RecordsManagement.Reporting.IReportGenerator.EndReport" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndReport ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndReport();" />
      <MemberSignature Language="F#" Value="abstract member EndReport : unit -&gt; unit" Usage="iReportGenerator.EndReport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Policy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends the current report.</summary>
        <remarks>
          <para>The reporting engine calls this method when it finishes generating the current report.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InjectDataRow">
      <MemberSignature Language="C#" Value="public void InjectDataRow (string[] rgstrColData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InjectDataRow(string[] rgstrColData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.RecordsManagement.Reporting.IReportGenerator.InjectDataRow(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InjectDataRow (rgstrColData As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InjectDataRow(cli::array &lt;System::String ^&gt; ^ rgstrColData);" />
      <MemberSignature Language="F#" Value="abstract member InjectDataRow : string[] -&gt; unit" Usage="iReportGenerator.InjectDataRow rgstrColData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Policy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgstrColData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="rgstrColData">The row of data to be injected, in the form of a string array.</param>
        <summary>Injects a row of data into the current report.</summary>
        <remarks>
          <para>The <b>InjectDataRow</b> method corresponds to the <b>IReportDataSource.GetNextDataRow()</b> method, which provides the row of data.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxRows">
      <MemberSignature Language="C#" Value="public int MaxRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.RecordsManagement.Reporting.IReportGenerator.MaxRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaxRows As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxRows { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxRows : int" Usage="Microsoft.Office.RecordsManagement.Reporting.IReportGenerator.MaxRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Policy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the maximum number of rows in a report.</summary>
        <value>Returns <see cref="T:System.Int32" />.</value>
        <remarks>
          <para>A report can contain at most the maximum number of rows. Use the <b>IReportDataSource.HasMoreData</b> method to check whether there is more data.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinRows">
      <MemberSignature Language="C#" Value="public int MinRows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinRows" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.RecordsManagement.Reporting.IReportGenerator.MinRows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MinRows As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinRows { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MinRows : int" Usage="Microsoft.Office.RecordsManagement.Reporting.IReportGenerator.MinRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Policy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minimum number of rows in a report.</summary>
        <value>Returns <see cref="T:System.Int32" />.</value>
        <remarks>
          <para>A report must contain at least the minimal number of rows, otherwise the reporting engine will throw a <b>ReportEmptyException</b>.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenReportStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenReportStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream OpenReportStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.RecordsManagement.Reporting.IReportGenerator.OpenReportStream" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenReportStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenReportStream();" />
      <MemberSignature Language="F#" Value="abstract member OpenReportStream : unit -&gt; System.IO.Stream" Usage="iReportGenerator.OpenReportStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Policy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opens the report stream.</summary>
        <returns>Returns <see cref="T:System.IO.Stream" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartReport">
      <MemberSignature Language="C#" Value="public void StartReport (System.IO.Stream stmTemplate, System.Collections.Hashtable parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartReport(class System.IO.Stream stmTemplate, class System.Collections.Hashtable parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.RecordsManagement.Reporting.IReportGenerator.StartReport(System.IO.Stream,System.Collections.Hashtable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartReport (stmTemplate As Stream, parameters As Hashtable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartReport(System::IO::Stream ^ stmTemplate, System::Collections::Hashtable ^ parameters);" />
      <MemberSignature Language="F#" Value="abstract member StartReport : System.IO.Stream * System.Collections.Hashtable -&gt; unit" Usage="iReportGenerator.StartReport (stmTemplate, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Policy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stmTemplate" Type="System.IO.Stream" />
        <Parameter Name="parameters" Type="System.Collections.Hashtable" />
      </Parameters>
      <Docs>
        <param name="stmTemplate">A stream representation of the report.</param>
        <param name="parameters">The collection of parameters to initialize for the report, in the form of a hash table.</param>
        <summary>Starts a report.</summary>
        <remarks>
          <para>The reporting engine calls this method when it starts generating the current report.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>