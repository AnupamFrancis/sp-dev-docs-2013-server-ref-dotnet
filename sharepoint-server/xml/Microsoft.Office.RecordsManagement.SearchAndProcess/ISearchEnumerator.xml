<Type Name="ISearchEnumerator" FullName="Microsoft.Office.RecordsManagement.SearchAndProcess.ISearchEnumerator">
  <TypeSignature Language="C#" Value="public interface ISearchEnumerator : System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISearchEnumerator implements class System.Collections.IEnumerator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.RecordsManagement.SearchAndProcess.ISearchEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISearchEnumerator&#xA;Implements IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISearchEnumerator : System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type ISearchEnumerator = interface&#xA;    interface IEnumerator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Policy</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides an interface to interact with the search and process job.</summary>
    <remarks>
      <para>A class that implements the <b>ISearchEnumerator</b> interface also needs to implement its base interface, <b>IEnumerator</b>.</para>
      <para>The search and process job first checks if the search result enumerator is 
    null
   with the <see cref="P:Microsoft.Office.RecordsManagement.SearchAndProcess.ISearchEnumeratorISearchEnumerator.IsNull" /> property. It then uses the <b>IEnumerator.Current</b> property to get the current item in the search result, and  uses the <b>IEnumerator.MoveNext()</b> method to move to the next search result. It also uses <b>IEnumerator.Reset()</b> to reset the enumerator.</para>
      <para />
    </remarks>
    <example>
      <code>using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Microsoft.SharePoint;
using Microsoft.SharePoint.Utilities;
using Microsoft.Office.RecordsManagement;
using Microsoft.Office.RecordsManagement.SearchAndProcess;

namespace Microsoft.SDK.SharePointServer.Samples
{
    /// &amp;lt;summary&amp;gt;
    /// The ISearchProvider interface provides an abstraction for a search provider to
    /// implement a custom search provider that can be used for replacing the out of box
    /// search provider only for the search and process timer job.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;remarks&amp;gt;
    /// &amp;lt;para&amp;gt;
    /// If you need to add custom search provider for the search and process timer job
    /// just implementing this interface and registering the SearchProvider registering
    /// the search provider using the method RegisterSearchEngine will replace the out
    /// of box search provider with your custom search provider. This will not generically
    /// replace the search provider for the whole system but only for the search and process
    /// timer job.
    /// &amp;lt;/para&amp;gt;
    /// &amp;lt;/remarks&amp;gt;

    public class CustomSearchEngine : ISearchProvider
    {
        // Return a search iterator object that provides search results within the passed
        // in SPWeb.
        public ISearchEnumerator PerformSearch(ISearchParameters param, SPWeb web)
        {
            return new CustomSearchIterator(web);
        }

        /// &amp;lt;summary&amp;gt;
        /// placeholder  implementation for GetSearchPageUrl
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;param name="web"&amp;gt;Search web name&amp;lt;/param&amp;gt;
        /// &amp;lt;returns&amp;gt;string&amp;lt;/returns&amp;gt;
        public string GetSearchPageUrl(SPWeb web)
        {
            return "/_layouts/customsearch.aspx";
        }
    }

    public class CustomSearchIterator : ISearchEnumerator
    {
        private SPList m_currentList = null;
        private IEnumerator m_itemsIterator = null;

        /// &amp;lt;summary&amp;gt;
        /// Constructor of the search iterator. Here we find a list in the SPWeb with 
        /// the supplied title. All items in the list will be returned as search results.
        /// &amp;lt;/summary&amp;gt;
        public CustomSearchIterator(SPWeb web)
        {
            m_currentList = web.Lists["customlistforsearch"];
            if (m_currentList != null)
            {
                m_itemsIterator = m_currentList.Items.GetEnumerator();
            }
        }

        /// &amp;lt;summary&amp;gt;
        /// Move to the next item in the search results.
        /// Essentially this method tells whether it's the end of search results.
        /// &amp;lt;/summary&amp;gt;
        /// &amp;lt;returns&amp;gt;Return false if it's the end of search results. Otherwise return true.&amp;lt;/returns&amp;gt;
        public bool MoveNext()
        {
            return m_itemsIterator.MoveNext();
        }

        // Never called. No need to implement.
        public void Reset()
        {
        }

        /// &amp;lt;summary&amp;gt;
        /// Return the current item in the search results.
        /// Here we just return the full URL of current item from a SPListItemCollection enumerator.
        /// &amp;lt;/summary&amp;gt;
        public object Current
        {
            get
            {
                SPListItem currentItem = (SPListItem)m_itemsIterator.Current;
                string itemUrl = SPUrlUtility.CombineUrl(currentItem.Web.Url, currentItem.Url);
                return (object)itemUrl;
            }
        }

        /// &amp;lt;summary&amp;gt;
        /// Whether the current item from search results is null.
        /// &amp;lt;/summary&amp;gt;
        public bool IsNull
        {
            get
            {
                return (Current == null);
            }
        }
    }


}</code>
    </example>
  </Docs>
  <Members>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.RecordsManagement.SearchAndProcess.ISearchEnumerator.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNull : bool" Usage="Microsoft.Office.RecordsManagement.SearchAndProcess.ISearchEnumerator.IsNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Policy</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that indicates if the enumerator is 
    null
  .</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>